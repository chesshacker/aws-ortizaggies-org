AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFront and other related resources for scouts226.com
Parameters:
  NamePrefix:
    Type: String
    Description: Prefix bucket names and such
    Default: scouts-226
  DomainName:
    Type: String
    Description: Domain Name for CloudFront and Certificate
    Default: scouts226.com
  HostedZoneId:
    Type: String
    Description: Hosted Zone ID to verify certificate
    Default: Z04904743718C3T4KLKEB
Resources:
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: !Sub "CloudFront Distribution for ${NamePrefix}"
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: "Z2FDTNDATAQYW2" # for CloudFront Distributions
          Name: !Ref DomainName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: "Z2FDTNDATAQYW2" # for CloudFront Distributions
          Name: !Ref DomainName
          Type: AAAA

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: !GetAtt CloudFrontCachePolicyDefault.Id
            Compress: true
            OriginRequestPolicyId: !GetAtt CloudFrontOriginRequestPolicyDefault.Id
            PathPattern: /images/*
            TargetOriginId: images
            ViewerProtocolPolicy: redirect-to-https
        Comment: !Sub "Distribution for ${NamePrefix}"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: !GetAtt CloudFrontCachePolicyDefault.Id
          Compress: true
          OriginRequestPolicyId: !GetAtt CloudFrontOriginRequestPolicyDefault.Id
          TargetOriginId: default
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt CloudFrontLogsBucket.RegionalDomainName
          IncludeCookies: false
        Origins:
          - DomainName: !GetAtt DefaultOriginBucket.RegionalDomainName
            Id: default
            OriginPath: /content
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
          - DomainName: !GetAtt ImagesOriginBucket.RegionalDomainName
            Id: images
            OriginPath: /content
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        PriceClass: PriceClass_100
        # Restrictions: Restrictions -- no georestrictions currently
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        # WebACLId: String -- no WAF just yet

  CloudFrontCachePolicyDefault:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${NamePrefix}-default-policy"
        Comment: !Sub "Default Cache Policy for ${NamePrefix}"
        DefaultTTL: 3600 # 1 hour
        MinTTL: 3600 # 1 hour
        MaxTTL: 86400 # 1 day
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  CloudFrontOriginRequestPolicyDefault:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub "${NamePrefix}-default-policy"
        Comment: !Sub "Default Origin Request Policy for ${NamePrefix}"
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: none
        QueryStringsConfig:
          QueryStringBehavior: none

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "CloudFront OAI for ${DomainName}"

  CloudFrontLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !Sub "${NamePrefix}-cloudfront-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter90Days
            Status: Enabled
            ExpirationInDays: 90

  DefaultOriginBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !Sub "${NamePrefix}-default-origin"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - Id: StrictCors
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders: []
            AllowedOrigins:
              - https://scouts226.com
            ExposedHeaders:
              - Cache-Control
              - Content-Length
              - Content-Type
              - Date
              - ETag
            MaxAge: 86400

  ImagesOriginBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      BucketName: !Sub "${NamePrefix}-images-origin"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - Id: StrictCors
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders: []
            AllowedOrigins:
              - https://scouts226.com
            ExposedHeaders:
              - Cache-Control
              - Content-Length
              - Content-Type
              - Date
              - ETag
            MaxAge: 86400

  DefaultOriginBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DefaultOriginBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${DefaultOriginBucket}/content/*"
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  ImagesOriginBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesOriginBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${ImagesOriginBucket}/content/*"
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
